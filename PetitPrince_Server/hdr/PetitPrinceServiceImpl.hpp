/*!
 * \file PetitPrinceServiceImpl.hpp
 * \author Enzo Ramos
 * \version 1.0
 *
 * \brief Define PetitPrinceService interface implementation.
 * 
 */

#ifndef SERVICEDRAWIMPL_HPP
#define SERVICEDRAWIMPL_HPP

#include "PetitPrince.hpp"

#include <map>

using namespace std;

/*!
 * \class PetitPrinceServiceImpl PetitPrinceServiceImpl.hpp
 * \brief This class implements the PetitPrinceService interface generated by the idl
 * after compilation. The PetitPrinceService class inherited is the POA version. The
 * POA classes inherit the _impl_ classes which inherit the interfaces.
 * This class will define the implementation of each methods contained in the
 * interface (see cpp source file).
 */
class PetitPrinceServiceImpl:
        virtual public POA_PetitPrince::PetitPrinceService,
        virtual public PortableServer::RefCountServantBase {

public:
    PetitPrinceServiceImpl();
    PetitPrinceServiceImpl(const PetitPrinceServiceImpl& orig);
    PetitPrinceServiceImpl(CORBA::ORB_var orb);
    virtual ~PetitPrinceServiceImpl();
    
    ::CORBA::Long createLine(const char* author, const ::PetitPrince::Point& a, const ::PetitPrince::Point& b) override;
    ::CORBA::Long createCircle(const char* author, const ::PetitPrince::Point& center, ::CORBA::Double ray) override;
    ::CORBA::Long createEllipse(const char* author, const ::PetitPrince::Point& center, ::CORBA::Double long_ray, ::CORBA::Double short_ray) override;
    ::CORBA::Long createPolygon(const char* author, const ::PetitPrince::PointSeq& pts) override;
    
    ::PetitPrince::LongSeq* getDraws(const char* author) override;
    void markDraw(::CORBA::Double mark, ::CORBA::Long id) override;
    

private:
    CORBA::ORB_var _orb;
    long cpt = 0;
    
public:
    static map<::CORBA::Long, ::PetitPrince::Draw*> _draw_list;
};


#endif /* SERVICEDRAWIMPL_HPP */

