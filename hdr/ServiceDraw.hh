// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ServiceDraw_hh__
#define __ServiceDraw_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE PetitPrince

_CORBA_MODULE_BEG

  struct Draw {
    typedef _CORBA_ConstrType_Variable_Var<Draw> _var_type;

    
    ::CORBA::Long id;

    ::CORBA::String_member id_author;

    ::CORBA::Long value;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Draw::_var_type Draw_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< Draw,Draw_var > Draw_out;

  struct MarkedDraw {
    typedef _CORBA_ConstrType_Fix_Var<MarkedDraw> _var_type;

    
    ::CORBA::Long id;

    ::CORBA::Long mark;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef MarkedDraw::_var_type MarkedDraw_var;

  typedef MarkedDraw& MarkedDraw_out;

#ifndef __PetitPrince_mDrawingService__
#define __PetitPrince_mDrawingService__

  class DrawingService;
  class _objref_DrawingService;
  class _impl_DrawingService;
  
  typedef _objref_DrawingService* DrawingService_ptr;
  typedef DrawingService_ptr DrawingServiceRef;

  class DrawingService_Helper {
  public:
    typedef DrawingService_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_DrawingService, DrawingService_Helper> DrawingService_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_DrawingService,DrawingService_Helper > DrawingService_out;

#endif

  // interface DrawingService
  class DrawingService {
  public:
    // Declarations for this interface type.
    typedef DrawingService_ptr _ptr_type;
    typedef DrawingService_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class ServiceException : public ::CORBA::UserException {
    public:
      
      ::CORBA::String_member message;

    

      inline ServiceException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ServiceException(const ServiceException&);
      ServiceException(const char* i_message);
      ServiceException& operator=(const ServiceException&);
      virtual ~ServiceException();
      virtual void _raise() const;
      static ServiceException* _downcast(::CORBA::Exception*);
      static const ServiceException* _downcast(const ::CORBA::Exception*);
      static inline ServiceException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

  
  };

  class _objref_DrawingService :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    ::CORBA::Long pushDraw(const ::PetitPrince::Draw& d);
    ::CORBA::Long replyDraw(const ::PetitPrince::MarkedDraw& marked_draw);

    inline _objref_DrawingService()  { _PR_setobj(0); }  // nil
    _objref_DrawingService(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_DrawingService();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_DrawingService(const _objref_DrawingService&);
    _objref_DrawingService& operator = (const _objref_DrawingService&);
    // not implemented

    friend class DrawingService;
  };

  class _pof_DrawingService : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_DrawingService() : _OMNI_NS(proxyObjectFactory)(DrawingService::_PD_repoId) {}
    virtual ~_pof_DrawingService();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_DrawingService :
    public virtual omniServant
  {
  public:
    virtual ~_impl_DrawingService();

    virtual ::CORBA::Long pushDraw(const ::PetitPrince::Draw& d) = 0;
    virtual ::CORBA::Long replyDraw(const ::PetitPrince::MarkedDraw& marked_draw) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


_CORBA_MODULE_END



_CORBA_MODULE POA_PetitPrince
_CORBA_MODULE_BEG

  class DrawingService :
    public virtual PetitPrince::_impl_DrawingService,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~DrawingService();

    inline ::PetitPrince::DrawingService_ptr _this() {
      return (::PetitPrince::DrawingService_ptr) _do_this(::PetitPrince::DrawingService::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_PetitPrince
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr



inline void
PetitPrince::DrawingService::_marshalObjRef(::PetitPrince::DrawingService_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ServiceDraw
#endif

#endif  // __ServiceDraw_hh__

