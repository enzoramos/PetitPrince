/*
 *Auteur : E.Ramos, J.Bidet, J.Ramsamy
 *Description : Ce module definie la structure des "dessins" ainsi que le designe du service
 */

module PetitPrince {

    struct Point {
        long x;
        long y;
    };

    valuetype Draw;

    typedef sequence<Draw> DrawSeq;

    valuetype Draw {

        readonly attribute long id;
        readonly attribute string author;
        attribute DrawSeq inner_draws;
        attribute long mark;

        long area();
        long perimeter();
        void homothetie(in long indice);
        void translation(in long x, in long y);
        void rotation(in long angle);
        void symCenter();
        void symAxial();

        string toString();
    };

    valuetype Line : Draw {
        attribute Point start;
        attribute Point end;
    };

    valuetype Cercle : Draw {
        attribute Point center;
        attribute long ray;
    };
    
    valuetype Ellipses : Draw {
        attribute Point center1;
        attribute Point center2;
        attribute long ray;
    };

    interface DrawService {
        exception non_applicable{string msg;};
        exception unexpected_draw{string msg;};

        long area(in Draw d)
            raises(non_applicable);
        long perimeter(in Draw d)
            raises(non_applicable);
        void homothetie(in Draw d, in long indice);
        void translation(in Draw d, in long x, in long y);
        void rotation(in Draw d, in long angle);
        void symCenter(in Draw d);
        void symAxial(in Draw d);
        void addDraw(in Draw parent, in Draw child)
            raises(unexpected_draw);

        string toString(in Draw d);
    };

    interface PetitPrinceService {
        attribute DrawSeq draw_list;

        void pushDraw(in Draw d);
        Draw getDraw(in long id);
        void markDraw(in long mark, in long id);
    };

};