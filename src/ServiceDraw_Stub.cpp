// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "ServiceDraw.hpp"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
PetitPrince::Draw::operator>>= (cdrStream &_n) const
{
  id >>= _n;
  _n.marshalString(id_author,0);
  value >>= _n;

}

void
PetitPrince::Draw::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)id <<= _n;
  id_author = _n.unmarshalString(0);
  (::CORBA::Long&)value <<= _n;

}

void
PetitPrince::MarkedDraw::operator>>= (cdrStream &_n) const
{
  id >>= _n;
  mark >>= _n;

}

void
PetitPrince::MarkedDraw::operator<<= (cdrStream &_n)
{
  (::CORBA::Long&)id <<= _n;
  (::CORBA::Long&)mark <<= _n;

}

::CORBA::Exception::insertExceptionToAny PetitPrince::DrawingService::ServiceException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP PetitPrince::DrawingService::ServiceException::insertToAnyFnNCP = 0;

PetitPrince::DrawingService::ServiceException::ServiceException(const PetitPrince::DrawingService::ServiceException& _s) : ::CORBA::UserException(_s)
{
  message = _s.message;

}

PetitPrince::DrawingService::ServiceException::ServiceException(const char* _message)
{
  pd_insertToAnyFn    = PetitPrince::DrawingService::ServiceException::insertToAnyFn;
  pd_insertToAnyFnNCP = PetitPrince::DrawingService::ServiceException::insertToAnyFnNCP;
  message = _message;

}



PetitPrince::DrawingService::ServiceException& PetitPrince::DrawingService::ServiceException::operator=(const PetitPrince::DrawingService::ServiceException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  message = _s.message;

  return *this;
}

PetitPrince::DrawingService::ServiceException::~ServiceException() {}

void PetitPrince::DrawingService::ServiceException::_raise() const { throw *this; }

const char* PetitPrince::DrawingService::ServiceException::_PD_repoId = "IDL:PetitPrince/DrawingService/ServiceException:1.0";
const char* PetitPrince::DrawingService::ServiceException::_PD_typeId = "Exception/UserException/PetitPrince::DrawingService::ServiceException";

PetitPrince::DrawingService::ServiceException* PetitPrince::DrawingService::ServiceException::_downcast(::CORBA::Exception* _e) {
  return (ServiceException*) _NP_is_a(_e, _PD_typeId);
}

const PetitPrince::DrawingService::ServiceException* PetitPrince::DrawingService::ServiceException::_downcast(const ::CORBA::Exception* _e) {
  return (const ServiceException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* PetitPrince::DrawingService::ServiceException::_NP_duplicate() const {
  return new ServiceException(*this);
}

const char* PetitPrince::DrawingService::ServiceException::_NP_typeId() const {
  return _PD_typeId;
}

const char* PetitPrince::DrawingService::ServiceException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:PetitPrince/DrawingService/ServiceException:1.0");
  return _PD_repoId;
}
 
void PetitPrince::DrawingService::ServiceException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
PetitPrince::DrawingService::ServiceException::operator>>= (cdrStream& _n) const
{
  _n.marshalString(message,0);

}

void
PetitPrince::DrawingService::ServiceException::operator<<= (cdrStream& _n)
{
  message = _n.unmarshalString(0);

}

PetitPrince::DrawingService_ptr PetitPrince::DrawingService_Helper::_nil() {
  return ::PetitPrince::DrawingService::_nil();
}

::CORBA::Boolean PetitPrince::DrawingService_Helper::is_nil(::PetitPrince::DrawingService_ptr p) {
  return ::CORBA::is_nil(p);

}

void PetitPrince::DrawingService_Helper::release(::PetitPrince::DrawingService_ptr p) {
  ::CORBA::release(p);
}

void PetitPrince::DrawingService_Helper::marshalObjRef(::PetitPrince::DrawingService_ptr obj, cdrStream& s) {
  ::PetitPrince::DrawingService::_marshalObjRef(obj, s);
}

PetitPrince::DrawingService_ptr PetitPrince::DrawingService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::PetitPrince::DrawingService::_unmarshalObjRef(s);
}

void PetitPrince::DrawingService_Helper::duplicate(::PetitPrince::DrawingService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

PetitPrince::DrawingService_ptr
PetitPrince::DrawingService::_duplicate(::PetitPrince::DrawingService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

PetitPrince::DrawingService_ptr
PetitPrince::DrawingService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


PetitPrince::DrawingService_ptr
PetitPrince::DrawingService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

PetitPrince::DrawingService_ptr
PetitPrince::DrawingService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DrawingService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DrawingService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DrawingService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* PetitPrince::DrawingService::_PD_repoId = "IDL:PetitPrince/DrawingService:1.0";


PetitPrince::_objref_DrawingService::~_objref_DrawingService() {
  
}


PetitPrince::_objref_DrawingService::_objref_DrawingService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::PetitPrince::DrawingService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
PetitPrince::_objref_DrawingService::_ptrToObjRef(const char* id)
{
  if( id == ::PetitPrince::DrawingService::_PD_repoId )
    return (::PetitPrince::DrawingService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::PetitPrince::DrawingService::_PD_repoId) )
    return (::PetitPrince::DrawingService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _clong_i_cPetitPrince_mDraw_e_cPetitPrince_mDrawingService_mServiceException
class _0RL_cd_825c0eb2a4af4c45_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_825c0eb2a4af4c45_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  PetitPrince::Draw_var arg_0_;
  const PetitPrince::Draw* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_825c0eb2a4af4c45_00000000::marshalArguments(cdrStream& _n)
{
  (const PetitPrince::Draw&) *arg_0 >>= _n;

}

void _0RL_cd_825c0eb2a4af4c45_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new PetitPrince::Draw;
  (PetitPrince::Draw&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

void _0RL_cd_825c0eb2a4af4c45_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_825c0eb2a4af4c45_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_825c0eb2a4af4c45_00000000::_user_exns[] = {
  PetitPrince::DrawingService::ServiceException::_PD_repoId
};

void _0RL_cd_825c0eb2a4af4c45_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, PetitPrince::DrawingService::ServiceException::_PD_repoId) ) {
    PetitPrince::DrawingService::ServiceException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_825c0eb2a4af4c45_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_825c0eb2a4af4c45_00000000* tcd = (_0RL_cd_825c0eb2a4af4c45_00000000*)cd;
  PetitPrince::_impl_DrawingService* impl = (PetitPrince::_impl_DrawingService*) svnt->_ptrToInterface(PetitPrince::DrawingService::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->pushDraw(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->pushDraw(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->pushDraw(*tcd->arg_0);
    }
    catch(PetitPrince::DrawingService::ServiceException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long PetitPrince::_objref_DrawingService::pushDraw(const ::PetitPrince::Draw& d)
{
  _0RL_cd_825c0eb2a4af4c45_00000000 _call_desc(_0RL_lcfn_825c0eb2a4af4c45_10000000, "pushDraw", 9);
  _call_desc.arg_0 = &(::PetitPrince::Draw&) d;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _clong_i_cPetitPrince_mMarkedDraw_e_cPetitPrince_mDrawingService_mServiceException
class _0RL_cd_825c0eb2a4af4c45_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_825c0eb2a4af4c45_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  PetitPrince::MarkedDraw arg_0_;
  const PetitPrince::MarkedDraw* arg_0;
  ::CORBA::Long result;
};

void _0RL_cd_825c0eb2a4af4c45_20000000::marshalArguments(cdrStream& _n)
{
  (const PetitPrince::MarkedDraw&) *arg_0 >>= _n;

}

void _0RL_cd_825c0eb2a4af4c45_20000000::unmarshalArguments(cdrStream& _n)
{
  (PetitPrince::MarkedDraw&)arg_0_ <<= _n;
  arg_0 = &arg_0_;

}

void _0RL_cd_825c0eb2a4af4c45_20000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_825c0eb2a4af4c45_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Long&)result <<= _n;

}

const char* const _0RL_cd_825c0eb2a4af4c45_20000000::_user_exns[] = {
  PetitPrince::DrawingService::ServiceException::_PD_repoId
};

void _0RL_cd_825c0eb2a4af4c45_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, PetitPrince::DrawingService::ServiceException::_PD_repoId) ) {
    PetitPrince::DrawingService::ServiceException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_825c0eb2a4af4c45_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_825c0eb2a4af4c45_20000000* tcd = (_0RL_cd_825c0eb2a4af4c45_20000000*)cd;
  PetitPrince::_impl_DrawingService* impl = (PetitPrince::_impl_DrawingService*) svnt->_ptrToInterface(PetitPrince::DrawingService::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->replyDraw(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->replyDraw(*tcd->arg_0);
  else {
    try {
      tcd->result = impl->replyDraw(*tcd->arg_0);
    }
    catch(PetitPrince::DrawingService::ServiceException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Long PetitPrince::_objref_DrawingService::replyDraw(const ::PetitPrince::MarkedDraw& marked_draw)
{
  _0RL_cd_825c0eb2a4af4c45_20000000 _call_desc(_0RL_lcfn_825c0eb2a4af4c45_30000000, "replyDraw", 10);
  _call_desc.arg_0 = &(::PetitPrince::MarkedDraw&) marked_draw;

  _invoke(_call_desc);
  return _call_desc.result;


}
PetitPrince::_pof_DrawingService::~_pof_DrawingService() {}


omniObjRef*
PetitPrince::_pof_DrawingService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::PetitPrince::_objref_DrawingService(ior, id);
}


::CORBA::Boolean
PetitPrince::_pof_DrawingService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::PetitPrince::DrawingService::_PD_repoId) )
    return 1;
  
  return 0;
}

const PetitPrince::_pof_DrawingService _the_pof_PetitPrince_mDrawingService;

PetitPrince::_impl_DrawingService::~_impl_DrawingService() {}


::CORBA::Boolean
PetitPrince::_impl_DrawingService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "pushDraw") ) {

    _0RL_cd_825c0eb2a4af4c45_00000000 _call_desc(_0RL_lcfn_825c0eb2a4af4c45_10000000, "pushDraw", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "replyDraw") ) {

    _0RL_cd_825c0eb2a4af4c45_20000000 _call_desc(_0RL_lcfn_825c0eb2a4af4c45_30000000, "replyDraw", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
PetitPrince::_impl_DrawingService::_ptrToInterface(const char* id)
{
  if( id == ::PetitPrince::DrawingService::_PD_repoId )
    return (::PetitPrince::_impl_DrawingService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::PetitPrince::DrawingService::_PD_repoId) )
    return (::PetitPrince::_impl_DrawingService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
PetitPrince::_impl_DrawingService::_mostDerivedRepoId()
{
  return ::PetitPrince::DrawingService::_PD_repoId;
}

POA_PetitPrince::DrawingService::~DrawingService() {}

