// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "ServiceDraw.hpp"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



void
PetitPrince::Point::operator>>= (cdrStream &_n) const
{
  x >>= _n;
  y >>= _n;

}

void
PetitPrince::Point::operator<<= (cdrStream &_n)
{
  (::CORBA::Double&)x <<= _n;
  (::CORBA::Double&)y <<= _n;

}

// valuetype Draw

void
PetitPrince::Draw_Helper::add_ref(::PetitPrince::Draw* _v)
{
  if (_v) _v->_add_ref();
}

void
PetitPrince::Draw_Helper::remove_ref(::PetitPrince::Draw* _v)
{
  if (_v) _v->_remove_ref();
}

PetitPrince::Draw*
PetitPrince::Draw::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (PetitPrince::Draw*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* PetitPrince::Draw::_PD_repoId = "IDL:PetitPrince/Draw:1.0";

const char*
PetitPrince::Draw::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
PetitPrince::Draw::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 2069783463U;
  return _PD_repoId;
}

::CORBA::Boolean
PetitPrince::Draw::_NP_custom() const
{
  return 0;
}

void*
PetitPrince::Draw::_ptrToValue(const char* _id)
{
  if (_id == ::PetitPrince::Draw::_PD_repoId)
    return (::PetitPrince::Draw*) this;
  
  

  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Draw::_PD_repoId))
    return (::PetitPrince::Draw*) this;
  
  

  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
PetitPrince::Draw::_NP_marshal(PetitPrince::Draw* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, PetitPrince::Draw::_PD_repoId, _0s);
}

void
PetitPrince::Draw_Helper::marshal(::PetitPrince::Draw* _v, cdrStream& _0s)
{
  PetitPrince::Draw::_NP_marshal(_v,_0s);
}

PetitPrince::Draw*
PetitPrince::Draw::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(PetitPrince::Draw::_PD_repoId,
						    2069783463U, 0, _0s);
  PetitPrince::Draw* _d = PetitPrince::Draw::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           PetitPrince::Draw::_PD_repoId,
           2069783463U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = PetitPrince::Draw::_downcast(_b);
  }
  return _d;
}

PetitPrince::Draw*
PetitPrince::Draw_Helper::unmarshal(cdrStream& _0s)
{
  return PetitPrince::Draw::_NP_unmarshal(_0s);
}

void
PetitPrince::Draw::_PR_marshal_state(cdrStream& _0s) const
{
  
}

void
PetitPrince::Draw::_PR_unmarshal_state(cdrStream& _0s)
{
  
}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
PetitPrince::Draw*
#else
::CORBA::ValueBase*
#endif
PetitPrince::Draw::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 2069783463U);
  PetitPrince::Draw* _v = PetitPrince::Draw::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
PetitPrince::Draw::_PR_copy_state(PetitPrince::Draw* _v)
{
  
}


PetitPrince::Draw::Draw()  {}
PetitPrince::Draw::~Draw() {}

OBV_PetitPrince::Draw::Draw() {}
OBV_PetitPrince::Draw::~Draw() {}

const _omni_ValueIds*
PetitPrince::Draw::_NP_truncatableIds() const
{
  return 0;
}

// valuetype Line

void
PetitPrince::Line_Helper::add_ref(::PetitPrince::Line* _v)
{
  if (_v) _v->_add_ref();
}

void
PetitPrince::Line_Helper::remove_ref(::PetitPrince::Line* _v)
{
  if (_v) _v->_remove_ref();
}

PetitPrince::Line*
PetitPrince::Line::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (PetitPrince::Line*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* PetitPrince::Line::_PD_repoId = "IDL:PetitPrince/Line:1.0";

const char*
PetitPrince::Line::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
PetitPrince::Line::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 2759746529U;
  return _PD_repoId;
}

::CORBA::Boolean
PetitPrince::Line::_NP_custom() const
{
  return 0;
}

void*
PetitPrince::Line::_ptrToValue(const char* _id)
{
  if (_id == ::PetitPrince::Line::_PD_repoId)
    return (::PetitPrince::Line*) this;
  
  if (_id == ::PetitPrince::Draw::_PD_repoId)
    return (::PetitPrince::Draw*) this;



  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Line::_PD_repoId))
    return (::PetitPrince::Line*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Draw::_PD_repoId))
    return (::PetitPrince::Draw*) this;



  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
PetitPrince::Line::_NP_marshal(PetitPrince::Line* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, PetitPrince::Line::_PD_repoId, _0s);
}

void
PetitPrince::Line_Helper::marshal(::PetitPrince::Line* _v, cdrStream& _0s)
{
  PetitPrince::Line::_NP_marshal(_v,_0s);
}

PetitPrince::Line*
PetitPrince::Line::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(PetitPrince::Line::_PD_repoId,
						    2759746529U, 0, _0s);
  PetitPrince::Line* _d = PetitPrince::Line::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           PetitPrince::Line::_PD_repoId,
           2759746529U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = PetitPrince::Line::_downcast(_b);
  }
  return _d;
}

PetitPrince::Line*
PetitPrince::Line_Helper::unmarshal(cdrStream& _0s)
{
  return PetitPrince::Line::_NP_unmarshal(_0s);
}

void
PetitPrince::Line::_PR_marshal_state(cdrStream& _0s) const
{
  ::PetitPrince::Draw::_PR_marshal_state(_0s);

}

void
PetitPrince::Line::_PR_unmarshal_state(cdrStream& _0s)
{
  ::PetitPrince::Draw::_PR_unmarshal_state(_0s);

}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
PetitPrince::Line*
#else
::CORBA::ValueBase*
#endif
PetitPrince::Line::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 2759746529U);
  PetitPrince::Line* _v = PetitPrince::Line::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
PetitPrince::Line::_PR_copy_state(PetitPrince::Line* _v)
{
  ::PetitPrince::Draw::_PR_copy_state(_v);

}


PetitPrince::Line::Line()  {}
PetitPrince::Line::~Line() {}

OBV_PetitPrince::Line::Line() {}
OBV_PetitPrince::Line::~Line() {}

const _omni_ValueIds*
PetitPrince::Line::_NP_truncatableIds() const
{
  return 0;
}

// valuetype Circle

void
PetitPrince::Circle_Helper::add_ref(::PetitPrince::Circle* _v)
{
  if (_v) _v->_add_ref();
}

void
PetitPrince::Circle_Helper::remove_ref(::PetitPrince::Circle* _v)
{
  if (_v) _v->_remove_ref();
}

PetitPrince::Circle*
PetitPrince::Circle::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (PetitPrince::Circle*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* PetitPrince::Circle::_PD_repoId = "IDL:PetitPrince/Circle:1.0";

const char*
PetitPrince::Circle::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
PetitPrince::Circle::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 3502532480U;
  return _PD_repoId;
}

::CORBA::Boolean
PetitPrince::Circle::_NP_custom() const
{
  return 0;
}

void*
PetitPrince::Circle::_ptrToValue(const char* _id)
{
  if (_id == ::PetitPrince::Circle::_PD_repoId)
    return (::PetitPrince::Circle*) this;
  
  if (_id == ::PetitPrince::Draw::_PD_repoId)
    return (::PetitPrince::Draw*) this;



  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Circle::_PD_repoId))
    return (::PetitPrince::Circle*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Draw::_PD_repoId))
    return (::PetitPrince::Draw*) this;



  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
PetitPrince::Circle::_NP_marshal(PetitPrince::Circle* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, PetitPrince::Circle::_PD_repoId, _0s);
}

void
PetitPrince::Circle_Helper::marshal(::PetitPrince::Circle* _v, cdrStream& _0s)
{
  PetitPrince::Circle::_NP_marshal(_v,_0s);
}

PetitPrince::Circle*
PetitPrince::Circle::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(PetitPrince::Circle::_PD_repoId,
						    3502532480U, 0, _0s);
  PetitPrince::Circle* _d = PetitPrince::Circle::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           PetitPrince::Circle::_PD_repoId,
           3502532480U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = PetitPrince::Circle::_downcast(_b);
  }
  return _d;
}

PetitPrince::Circle*
PetitPrince::Circle_Helper::unmarshal(cdrStream& _0s)
{
  return PetitPrince::Circle::_NP_unmarshal(_0s);
}

void
PetitPrince::Circle::_PR_marshal_state(cdrStream& _0s) const
{
  ::PetitPrince::Draw::_PR_marshal_state(_0s);

}

void
PetitPrince::Circle::_PR_unmarshal_state(cdrStream& _0s)
{
  ::PetitPrince::Draw::_PR_unmarshal_state(_0s);

}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
PetitPrince::Circle*
#else
::CORBA::ValueBase*
#endif
PetitPrince::Circle::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 3502532480U);
  PetitPrince::Circle* _v = PetitPrince::Circle::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
PetitPrince::Circle::_PR_copy_state(PetitPrince::Circle* _v)
{
  ::PetitPrince::Draw::_PR_copy_state(_v);

}


PetitPrince::Circle::Circle()  {}
PetitPrince::Circle::~Circle() {}

OBV_PetitPrince::Circle::Circle() {}
OBV_PetitPrince::Circle::~Circle() {}

const _omni_ValueIds*
PetitPrince::Circle::_NP_truncatableIds() const
{
  return 0;
}

// valuetype Ellipse

void
PetitPrince::Ellipse_Helper::add_ref(::PetitPrince::Ellipse* _v)
{
  if (_v) _v->_add_ref();
}

void
PetitPrince::Ellipse_Helper::remove_ref(::PetitPrince::Ellipse* _v)
{
  if (_v) _v->_remove_ref();
}

PetitPrince::Ellipse*
PetitPrince::Ellipse::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (PetitPrince::Ellipse*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* PetitPrince::Ellipse::_PD_repoId = "IDL:PetitPrince/Ellipse:1.0";

const char*
PetitPrince::Ellipse::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
PetitPrince::Ellipse::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 828486077U;
  return _PD_repoId;
}

::CORBA::Boolean
PetitPrince::Ellipse::_NP_custom() const
{
  return 0;
}

void*
PetitPrince::Ellipse::_ptrToValue(const char* _id)
{
  if (_id == ::PetitPrince::Ellipse::_PD_repoId)
    return (::PetitPrince::Ellipse*) this;
  
  if (_id == ::PetitPrince::Draw::_PD_repoId)
    return (::PetitPrince::Draw*) this;



  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Ellipse::_PD_repoId))
    return (::PetitPrince::Ellipse*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Draw::_PD_repoId))
    return (::PetitPrince::Draw*) this;



  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
PetitPrince::Ellipse::_NP_marshal(PetitPrince::Ellipse* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, PetitPrince::Ellipse::_PD_repoId, _0s);
}

void
PetitPrince::Ellipse_Helper::marshal(::PetitPrince::Ellipse* _v, cdrStream& _0s)
{
  PetitPrince::Ellipse::_NP_marshal(_v,_0s);
}

PetitPrince::Ellipse*
PetitPrince::Ellipse::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(PetitPrince::Ellipse::_PD_repoId,
						    828486077U, 0, _0s);
  PetitPrince::Ellipse* _d = PetitPrince::Ellipse::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           PetitPrince::Ellipse::_PD_repoId,
           828486077U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = PetitPrince::Ellipse::_downcast(_b);
  }
  return _d;
}

PetitPrince::Ellipse*
PetitPrince::Ellipse_Helper::unmarshal(cdrStream& _0s)
{
  return PetitPrince::Ellipse::_NP_unmarshal(_0s);
}

void
PetitPrince::Ellipse::_PR_marshal_state(cdrStream& _0s) const
{
  ::PetitPrince::Draw::_PR_marshal_state(_0s);

}

void
PetitPrince::Ellipse::_PR_unmarshal_state(cdrStream& _0s)
{
  ::PetitPrince::Draw::_PR_unmarshal_state(_0s);

}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
PetitPrince::Ellipse*
#else
::CORBA::ValueBase*
#endif
PetitPrince::Ellipse::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 828486077U);
  PetitPrince::Ellipse* _v = PetitPrince::Ellipse::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
PetitPrince::Ellipse::_PR_copy_state(PetitPrince::Ellipse* _v)
{
  ::PetitPrince::Draw::_PR_copy_state(_v);

}


PetitPrince::Ellipse::Ellipse()  {}
PetitPrince::Ellipse::~Ellipse() {}

OBV_PetitPrince::Ellipse::Ellipse() {}
OBV_PetitPrince::Ellipse::~Ellipse() {}

const _omni_ValueIds*
PetitPrince::Ellipse::_NP_truncatableIds() const
{
  return 0;
}

// valuetype Polygon

void
PetitPrince::Polygon_Helper::add_ref(::PetitPrince::Polygon* _v)
{
  if (_v) _v->_add_ref();
}

void
PetitPrince::Polygon_Helper::remove_ref(::PetitPrince::Polygon* _v)
{
  if (_v) _v->_remove_ref();
}

PetitPrince::Polygon*
PetitPrince::Polygon::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (PetitPrince::Polygon*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* PetitPrince::Polygon::_PD_repoId = "IDL:PetitPrince/Polygon:1.0";

const char*
PetitPrince::Polygon::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
PetitPrince::Polygon::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 3380990264U;
  return _PD_repoId;
}

::CORBA::Boolean
PetitPrince::Polygon::_NP_custom() const
{
  return 0;
}

void*
PetitPrince::Polygon::_ptrToValue(const char* _id)
{
  if (_id == ::PetitPrince::Polygon::_PD_repoId)
    return (::PetitPrince::Polygon*) this;
  
  if (_id == ::PetitPrince::Draw::_PD_repoId)
    return (::PetitPrince::Draw*) this;



  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Polygon::_PD_repoId))
    return (::PetitPrince::Polygon*) this;
  
  if (omni::strMatch(_id, ::PetitPrince::Draw::_PD_repoId))
    return (::PetitPrince::Draw*) this;



  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
PetitPrince::Polygon::_NP_marshal(PetitPrince::Polygon* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, PetitPrince::Polygon::_PD_repoId, _0s);
}

void
PetitPrince::Polygon_Helper::marshal(::PetitPrince::Polygon* _v, cdrStream& _0s)
{
  PetitPrince::Polygon::_NP_marshal(_v,_0s);
}

PetitPrince::Polygon*
PetitPrince::Polygon::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(PetitPrince::Polygon::_PD_repoId,
						    3380990264U, 0, _0s);
  PetitPrince::Polygon* _d = PetitPrince::Polygon::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           PetitPrince::Polygon::_PD_repoId,
           3380990264U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = PetitPrince::Polygon::_downcast(_b);
  }
  return _d;
}

PetitPrince::Polygon*
PetitPrince::Polygon_Helper::unmarshal(cdrStream& _0s)
{
  return PetitPrince::Polygon::_NP_unmarshal(_0s);
}

void
PetitPrince::Polygon::_PR_marshal_state(cdrStream& _0s) const
{
  ::PetitPrince::Draw::_PR_marshal_state(_0s);

}

void
PetitPrince::Polygon::_PR_unmarshal_state(cdrStream& _0s)
{
  ::PetitPrince::Draw::_PR_unmarshal_state(_0s);

}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
PetitPrince::Polygon*
#else
::CORBA::ValueBase*
#endif
PetitPrince::Polygon::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 3380990264U);
  PetitPrince::Polygon* _v = PetitPrince::Polygon::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
PetitPrince::Polygon::_PR_copy_state(PetitPrince::Polygon* _v)
{
  ::PetitPrince::Draw::_PR_copy_state(_v);

}


PetitPrince::Polygon::Polygon()  {}
PetitPrince::Polygon::~Polygon() {}

OBV_PetitPrince::Polygon::Polygon() {}
OBV_PetitPrince::Polygon::~Polygon() {}

const _omni_ValueIds*
PetitPrince::Polygon::_NP_truncatableIds() const
{
  return 0;
}

::CORBA::Exception::insertExceptionToAny PetitPrince::DrawService::non_applicable::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP PetitPrince::DrawService::non_applicable::insertToAnyFnNCP = 0;

PetitPrince::DrawService::non_applicable::non_applicable(const PetitPrince::DrawService::non_applicable& _s) : ::CORBA::UserException(_s)
{
  msg = _s.msg;

}

PetitPrince::DrawService::non_applicable::non_applicable(const char* _msg)
{
  pd_insertToAnyFn    = PetitPrince::DrawService::non_applicable::insertToAnyFn;
  pd_insertToAnyFnNCP = PetitPrince::DrawService::non_applicable::insertToAnyFnNCP;
  msg = _msg;

}



PetitPrince::DrawService::non_applicable& PetitPrince::DrawService::non_applicable::operator=(const PetitPrince::DrawService::non_applicable& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  msg = _s.msg;

  return *this;
}

PetitPrince::DrawService::non_applicable::~non_applicable() {}

void PetitPrince::DrawService::non_applicable::_raise() const { throw *this; }

const char* PetitPrince::DrawService::non_applicable::_PD_repoId = "IDL:PetitPrince/DrawService/non_applicable:1.0";
const char* PetitPrince::DrawService::non_applicable::_PD_typeId = "Exception/UserException/PetitPrince::DrawService::non_applicable";

PetitPrince::DrawService::non_applicable* PetitPrince::DrawService::non_applicable::_downcast(::CORBA::Exception* _e) {
  return (non_applicable*) _NP_is_a(_e, _PD_typeId);
}

const PetitPrince::DrawService::non_applicable* PetitPrince::DrawService::non_applicable::_downcast(const ::CORBA::Exception* _e) {
  return (const non_applicable*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* PetitPrince::DrawService::non_applicable::_NP_duplicate() const {
  return new non_applicable(*this);
}

const char* PetitPrince::DrawService::non_applicable::_NP_typeId() const {
  return _PD_typeId;
}

const char* PetitPrince::DrawService::non_applicable::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:PetitPrince/DrawService/non_applicable:1.0");
  return _PD_repoId;
}
 
void PetitPrince::DrawService::non_applicable::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
PetitPrince::DrawService::non_applicable::operator>>= (cdrStream& _n) const
{
  _n.marshalString(msg,0);

}

void
PetitPrince::DrawService::non_applicable::operator<<= (cdrStream& _n)
{
  msg = _n.unmarshalString(0);

}

::CORBA::Exception::insertExceptionToAny PetitPrince::DrawService::unexpected_draw::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP PetitPrince::DrawService::unexpected_draw::insertToAnyFnNCP = 0;

PetitPrince::DrawService::unexpected_draw::unexpected_draw(const PetitPrince::DrawService::unexpected_draw& _s) : ::CORBA::UserException(_s)
{
  msg = _s.msg;

}

PetitPrince::DrawService::unexpected_draw::unexpected_draw(const char* _msg)
{
  pd_insertToAnyFn    = PetitPrince::DrawService::unexpected_draw::insertToAnyFn;
  pd_insertToAnyFnNCP = PetitPrince::DrawService::unexpected_draw::insertToAnyFnNCP;
  msg = _msg;

}



PetitPrince::DrawService::unexpected_draw& PetitPrince::DrawService::unexpected_draw::operator=(const PetitPrince::DrawService::unexpected_draw& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  msg = _s.msg;

  return *this;
}

PetitPrince::DrawService::unexpected_draw::~unexpected_draw() {}

void PetitPrince::DrawService::unexpected_draw::_raise() const { throw *this; }

const char* PetitPrince::DrawService::unexpected_draw::_PD_repoId = "IDL:PetitPrince/DrawService/unexpected_draw:1.0";
const char* PetitPrince::DrawService::unexpected_draw::_PD_typeId = "Exception/UserException/PetitPrince::DrawService::unexpected_draw";

PetitPrince::DrawService::unexpected_draw* PetitPrince::DrawService::unexpected_draw::_downcast(::CORBA::Exception* _e) {
  return (unexpected_draw*) _NP_is_a(_e, _PD_typeId);
}

const PetitPrince::DrawService::unexpected_draw* PetitPrince::DrawService::unexpected_draw::_downcast(const ::CORBA::Exception* _e) {
  return (const unexpected_draw*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* PetitPrince::DrawService::unexpected_draw::_NP_duplicate() const {
  return new unexpected_draw(*this);
}

const char* PetitPrince::DrawService::unexpected_draw::_NP_typeId() const {
  return _PD_typeId;
}

const char* PetitPrince::DrawService::unexpected_draw::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:PetitPrince/DrawService/unexpected_draw:1.0");
  return _PD_repoId;
}
 
void PetitPrince::DrawService::unexpected_draw::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
PetitPrince::DrawService::unexpected_draw::operator>>= (cdrStream& _n) const
{
  _n.marshalString(msg,0);

}

void
PetitPrince::DrawService::unexpected_draw::operator<<= (cdrStream& _n)
{
  msg = _n.unmarshalString(0);

}

PetitPrince::DrawService_ptr PetitPrince::DrawService_Helper::_nil() {
  return ::PetitPrince::DrawService::_nil();
}

::CORBA::Boolean PetitPrince::DrawService_Helper::is_nil(::PetitPrince::DrawService_ptr p) {
  return ::CORBA::is_nil(p);

}

void PetitPrince::DrawService_Helper::release(::PetitPrince::DrawService_ptr p) {
  ::CORBA::release(p);
}

void PetitPrince::DrawService_Helper::marshalObjRef(::PetitPrince::DrawService_ptr obj, cdrStream& s) {
  ::PetitPrince::DrawService::_marshalObjRef(obj, s);
}

PetitPrince::DrawService_ptr PetitPrince::DrawService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::PetitPrince::DrawService::_unmarshalObjRef(s);
}

void PetitPrince::DrawService_Helper::duplicate(::PetitPrince::DrawService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

PetitPrince::DrawService_ptr
PetitPrince::DrawService::_duplicate(::PetitPrince::DrawService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

PetitPrince::DrawService_ptr
PetitPrince::DrawService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


PetitPrince::DrawService_ptr
PetitPrince::DrawService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

PetitPrince::DrawService_ptr
PetitPrince::DrawService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_DrawService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_DrawService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_DrawService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* PetitPrince::DrawService::_PD_repoId = "IDL:PetitPrince/DrawService:1.0";


PetitPrince::_objref_DrawService::~_objref_DrawService() {
  
}


PetitPrince::_objref_DrawService::_objref_DrawService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::PetitPrince::DrawService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
PetitPrince::_objref_DrawService::_ptrToObjRef(const char* id)
{
  if( id == ::PetitPrince::DrawService::_PD_repoId )
    return (::PetitPrince::DrawService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::PetitPrince::DrawService::_PD_repoId) )
    return (::PetitPrince::DrawService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cdouble_i_cPetitPrince_mDraw_e_cPetitPrince_mDrawService_mnon__applicable
class _0RL_cd_c93297503b4b476c_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  PetitPrince::Draw_var arg_0_;
  PetitPrince::Draw* arg_0;
  ::CORBA::Double result;
};

void _0RL_cd_c93297503b4b476c_00000000::marshalArguments(cdrStream& _n)
{
  PetitPrince::Draw_Helper::marshal(arg_0,_n);

}

void _0RL_cd_c93297503b4b476c_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = PetitPrince::Draw_Helper::unmarshal(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_c93297503b4b476c_00000000::marshalReturnedValues(cdrStream& _n)
{
  result >>= _n;

}

void _0RL_cd_c93297503b4b476c_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  (::CORBA::Double&)result <<= _n;

}

const char* const _0RL_cd_c93297503b4b476c_00000000::_user_exns[] = {
  PetitPrince::DrawService::non_applicable::_PD_repoId
};

void _0RL_cd_c93297503b4b476c_00000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, PetitPrince::DrawService::non_applicable::_PD_repoId) ) {
    PetitPrince::DrawService::non_applicable _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_00000000* tcd = (_0RL_cd_c93297503b4b476c_00000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->area(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->area(tcd->arg_0);
  else {
    try {
      tcd->result = impl->area(tcd->arg_0);
    }
    catch(PetitPrince::DrawService::non_applicable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Double PetitPrince::_objref_DrawService::area(::PetitPrince::Draw* d)
{
  _0RL_cd_c93297503b4b476c_00000000 _call_desc(_0RL_lcfn_c93297503b4b476c_10000000, "area", 5);
  _call_desc.arg_0 = d;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_20000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_00000000* tcd = (_0RL_cd_c93297503b4b476c_00000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->perimeter(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->perimeter(tcd->arg_0);
  else {
    try {
      tcd->result = impl->perimeter(tcd->arg_0);
    }
    catch(PetitPrince::DrawService::non_applicable& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

::CORBA::Double PetitPrince::_objref_DrawService::perimeter(::PetitPrince::Draw* d)
{
  _0RL_cd_c93297503b4b476c_00000000 _call_desc(_0RL_lcfn_c93297503b4b476c_20000000, "perimeter", 10);
  _call_desc.arg_0 = d;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cPetitPrince_mDraw_i_cdouble
class _0RL_cd_c93297503b4b476c_30000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_30000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  PetitPrince::Draw_var arg_0_;
  PetitPrince::Draw* arg_0;
  ::CORBA::Double arg_1;
};

void _0RL_cd_c93297503b4b476c_30000000::marshalArguments(cdrStream& _n)
{
  PetitPrince::Draw_Helper::marshal(arg_0,_n);
  arg_1 >>= _n;

}

void _0RL_cd_c93297503b4b476c_30000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = PetitPrince::Draw_Helper::unmarshal(_n);
  arg_0 = arg_0_.in();
  (::CORBA::Double&)arg_1 <<= _n;

}

const char* const _0RL_cd_c93297503b4b476c_30000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_40000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_30000000* tcd = (_0RL_cd_c93297503b4b476c_30000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
  impl->homothetie(tcd->arg_0, tcd->arg_1);


}

void PetitPrince::_objref_DrawService::homothetie(::PetitPrince::Draw* d, ::CORBA::Double indice)
{
  _0RL_cd_c93297503b4b476c_30000000 _call_desc(_0RL_lcfn_c93297503b4b476c_40000000, "homothetie", 11);
  _call_desc.arg_0 = d;
  _call_desc.arg_1 = indice;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cPetitPrince_mDraw_i_cdouble_i_cdouble
class _0RL_cd_c93297503b4b476c_50000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_50000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  PetitPrince::Draw_var arg_0_;
  PetitPrince::Draw* arg_0;
  ::CORBA::Double arg_1;
  ::CORBA::Double arg_2;
};

void _0RL_cd_c93297503b4b476c_50000000::marshalArguments(cdrStream& _n)
{
  PetitPrince::Draw_Helper::marshal(arg_0,_n);
  arg_1 >>= _n;
  arg_2 >>= _n;

}

void _0RL_cd_c93297503b4b476c_50000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = PetitPrince::Draw_Helper::unmarshal(_n);
  arg_0 = arg_0_.in();
  (::CORBA::Double&)arg_1 <<= _n;
  (::CORBA::Double&)arg_2 <<= _n;

}

const char* const _0RL_cd_c93297503b4b476c_50000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_60000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_50000000* tcd = (_0RL_cd_c93297503b4b476c_50000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
  impl->translation(tcd->arg_0, tcd->arg_1, tcd->arg_2);


}

void PetitPrince::_objref_DrawService::translation(::PetitPrince::Draw* d, ::CORBA::Double x, ::CORBA::Double y)
{
  _0RL_cd_c93297503b4b476c_50000000 _call_desc(_0RL_lcfn_c93297503b4b476c_60000000, "translation", 12);
  _call_desc.arg_0 = d;
  _call_desc.arg_1 = x;
  _call_desc.arg_2 = y;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_30000000* tcd = (_0RL_cd_c93297503b4b476c_30000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
  impl->rotation(tcd->arg_0, tcd->arg_1);


}

void PetitPrince::_objref_DrawService::rotation(::PetitPrince::Draw* d, ::CORBA::Double angle)
{
  _0RL_cd_c93297503b4b476c_30000000 _call_desc(_0RL_lcfn_c93297503b4b476c_70000000, "rotation", 9);
  _call_desc.arg_0 = d;
  _call_desc.arg_1 = angle;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cPetitPrince_mDraw
class _0RL_cd_c93297503b4b476c_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  PetitPrince::Draw_var arg_0_;
  PetitPrince::Draw* arg_0;
};

void _0RL_cd_c93297503b4b476c_80000000::marshalArguments(cdrStream& _n)
{
  PetitPrince::Draw_Helper::marshal(arg_0,_n);

}

void _0RL_cd_c93297503b4b476c_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = PetitPrince::Draw_Helper::unmarshal(_n);
  arg_0 = arg_0_.in();

}

const char* const _0RL_cd_c93297503b4b476c_80000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_80000000* tcd = (_0RL_cd_c93297503b4b476c_80000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
  impl->symCenter(tcd->arg_0);


}

void PetitPrince::_objref_DrawService::symCenter(::PetitPrince::Draw* d)
{
  _0RL_cd_c93297503b4b476c_80000000 _call_desc(_0RL_lcfn_c93297503b4b476c_90000000, "symCenter", 10);
  _call_desc.arg_0 = d;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_a0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_80000000* tcd = (_0RL_cd_c93297503b4b476c_80000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
  impl->symAxial(tcd->arg_0);


}

void PetitPrince::_objref_DrawService::symAxial(::PetitPrince::Draw* d)
{
  _0RL_cd_c93297503b4b476c_80000000 _call_desc(_0RL_lcfn_c93297503b4b476c_a0000000, "symAxial", 9);
  _call_desc.arg_0 = d;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_i_cPetitPrince_mDraw_i_cPetitPrince_mDraw_e_cPetitPrince_mDrawService_munexpected__draw
class _0RL_cd_c93297503b4b476c_b0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_b0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 1, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  PetitPrince::Draw_var arg_0_;
  PetitPrince::Draw* arg_0;
  PetitPrince::Draw_var arg_1_;
  PetitPrince::Draw* arg_1;
};

void _0RL_cd_c93297503b4b476c_b0000000::marshalArguments(cdrStream& _n)
{
  PetitPrince::Draw_Helper::marshal(arg_0,_n);
  PetitPrince::Draw_Helper::marshal(arg_1,_n);

}

void _0RL_cd_c93297503b4b476c_b0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = PetitPrince::Draw_Helper::unmarshal(_n);
  arg_0 = arg_0_.in();
  arg_1_ = PetitPrince::Draw_Helper::unmarshal(_n);
  arg_1 = arg_1_.in();

}

const char* const _0RL_cd_c93297503b4b476c_b0000000::_user_exns[] = {
  PetitPrince::DrawService::unexpected_draw::_PD_repoId
};

void _0RL_cd_c93297503b4b476c_b0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, PetitPrince::DrawService::unexpected_draw::_PD_repoId) ) {
    PetitPrince::DrawService::unexpected_draw _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_b0000000* tcd = (_0RL_cd_c93297503b4b476c_b0000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->addDraw(tcd->arg_0, tcd->arg_1);
#else
  if (!cd->is_upcall())
    impl->addDraw(tcd->arg_0, tcd->arg_1);
  else {
    try {
      impl->addDraw(tcd->arg_0, tcd->arg_1);
    }
    catch(PetitPrince::DrawService::unexpected_draw& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void PetitPrince::_objref_DrawService::addDraw(::PetitPrince::Draw* parent, ::PetitPrince::Draw* child)
{
  _0RL_cd_c93297503b4b476c_b0000000 _call_desc(_0RL_lcfn_c93297503b4b476c_c0000000, "addDraw", 8);
  _call_desc.arg_0 = parent;
  _call_desc.arg_1 = child;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cstring_i_cPetitPrince_mDraw
class _0RL_cd_c93297503b4b476c_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  PetitPrince::Draw_var arg_0_;
  PetitPrince::Draw* arg_0;
  ::CORBA::String_var result;
};

void _0RL_cd_c93297503b4b476c_d0000000::marshalArguments(cdrStream& _n)
{
  PetitPrince::Draw_Helper::marshal(arg_0,_n);

}

void _0RL_cd_c93297503b4b476c_d0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = PetitPrince::Draw_Helper::unmarshal(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_c93297503b4b476c_d0000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalString(result,0);

}

void _0RL_cd_c93297503b4b476c_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalString(0);

}

const char* const _0RL_cd_c93297503b4b476c_d0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_d0000000* tcd = (_0RL_cd_c93297503b4b476c_d0000000*)cd;
  PetitPrince::_impl_DrawService* impl = (PetitPrince::_impl_DrawService*) svnt->_ptrToInterface(PetitPrince::DrawService::_PD_repoId);
  tcd->result = impl->toString(tcd->arg_0);


}

char* PetitPrince::_objref_DrawService::toString(::PetitPrince::Draw* d)
{
  _0RL_cd_c93297503b4b476c_d0000000 _call_desc(_0RL_lcfn_c93297503b4b476c_e0000000, "toString", 9);
  _call_desc.arg_0 = d;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
PetitPrince::_pof_DrawService::~_pof_DrawService() {}


omniObjRef*
PetitPrince::_pof_DrawService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::PetitPrince::_objref_DrawService(ior, id);
}


::CORBA::Boolean
PetitPrince::_pof_DrawService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::PetitPrince::DrawService::_PD_repoId) )
    return 1;
  
  return 0;
}

const PetitPrince::_pof_DrawService _the_pof_PetitPrince_mDrawService;

PetitPrince::_impl_DrawService::~_impl_DrawService() {}


::CORBA::Boolean
PetitPrince::_impl_DrawService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "area") ) {

    _0RL_cd_c93297503b4b476c_00000000 _call_desc(_0RL_lcfn_c93297503b4b476c_10000000, "area", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "perimeter") ) {

    _0RL_cd_c93297503b4b476c_00000000 _call_desc(_0RL_lcfn_c93297503b4b476c_20000000, "perimeter", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "homothetie") ) {

    _0RL_cd_c93297503b4b476c_30000000 _call_desc(_0RL_lcfn_c93297503b4b476c_40000000, "homothetie", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "translation") ) {

    _0RL_cd_c93297503b4b476c_50000000 _call_desc(_0RL_lcfn_c93297503b4b476c_60000000, "translation", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "rotation") ) {

    _0RL_cd_c93297503b4b476c_30000000 _call_desc(_0RL_lcfn_c93297503b4b476c_70000000, "rotation", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "symCenter") ) {

    _0RL_cd_c93297503b4b476c_80000000 _call_desc(_0RL_lcfn_c93297503b4b476c_90000000, "symCenter", 10, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "symAxial") ) {

    _0RL_cd_c93297503b4b476c_80000000 _call_desc(_0RL_lcfn_c93297503b4b476c_a0000000, "symAxial", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "addDraw") ) {

    _0RL_cd_c93297503b4b476c_b0000000 _call_desc(_0RL_lcfn_c93297503b4b476c_c0000000, "addDraw", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "toString") ) {

    _0RL_cd_c93297503b4b476c_d0000000 _call_desc(_0RL_lcfn_c93297503b4b476c_e0000000, "toString", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
PetitPrince::_impl_DrawService::_ptrToInterface(const char* id)
{
  if( id == ::PetitPrince::DrawService::_PD_repoId )
    return (::PetitPrince::_impl_DrawService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::PetitPrince::DrawService::_PD_repoId) )
    return (::PetitPrince::_impl_DrawService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
PetitPrince::_impl_DrawService::_mostDerivedRepoId()
{
  return ::PetitPrince::DrawService::_PD_repoId;
}

PetitPrince::PetitPrinceService_ptr PetitPrince::PetitPrinceService_Helper::_nil() {
  return ::PetitPrince::PetitPrinceService::_nil();
}

::CORBA::Boolean PetitPrince::PetitPrinceService_Helper::is_nil(::PetitPrince::PetitPrinceService_ptr p) {
  return ::CORBA::is_nil(p);

}

void PetitPrince::PetitPrinceService_Helper::release(::PetitPrince::PetitPrinceService_ptr p) {
  ::CORBA::release(p);
}

void PetitPrince::PetitPrinceService_Helper::marshalObjRef(::PetitPrince::PetitPrinceService_ptr obj, cdrStream& s) {
  ::PetitPrince::PetitPrinceService::_marshalObjRef(obj, s);
}

PetitPrince::PetitPrinceService_ptr PetitPrince::PetitPrinceService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::PetitPrince::PetitPrinceService::_unmarshalObjRef(s);
}

void PetitPrince::PetitPrinceService_Helper::duplicate(::PetitPrince::PetitPrinceService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

PetitPrince::PetitPrinceService_ptr
PetitPrince::PetitPrinceService::_duplicate(::PetitPrince::PetitPrinceService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

PetitPrince::PetitPrinceService_ptr
PetitPrince::PetitPrinceService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


PetitPrince::PetitPrinceService_ptr
PetitPrince::PetitPrinceService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

PetitPrince::PetitPrinceService_ptr
PetitPrince::PetitPrinceService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_PetitPrinceService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_PetitPrinceService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_PetitPrinceService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* PetitPrince::PetitPrinceService::_PD_repoId = "IDL:PetitPrince/PetitPrinceService:1.0";


PetitPrince::_objref_PetitPrinceService::~_objref_PetitPrinceService() {
  
}


PetitPrince::_objref_PetitPrinceService::_objref_PetitPrinceService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::PetitPrince::PetitPrinceService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
PetitPrince::_objref_PetitPrinceService::_ptrToObjRef(const char* id)
{
  if( id == ::PetitPrince::PetitPrinceService::_PD_repoId )
    return (::PetitPrince::PetitPrinceService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::PetitPrince::PetitPrinceService::_PD_repoId) )
    return (::PetitPrince::PetitPrinceService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_f0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_80000000* tcd = (_0RL_cd_c93297503b4b476c_80000000*)cd;
  PetitPrince::_impl_PetitPrinceService* impl = (PetitPrince::_impl_PetitPrinceService*) svnt->_ptrToInterface(PetitPrince::PetitPrinceService::_PD_repoId);
  impl->pushDraw(tcd->arg_0);


}

void PetitPrince::_objref_PetitPrinceService::pushDraw(::PetitPrince::Draw* d)
{
  _0RL_cd_c93297503b4b476c_80000000 _call_desc(_0RL_lcfn_c93297503b4b476c_f0000000, "pushDraw", 9);
  _call_desc.arg_0 = d;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cPetitPrince_mDraw_i_clong
class _0RL_cd_c93297503b4b476c_01000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_01000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::Long arg_0;
  PetitPrince::Draw_var result;
};

void _0RL_cd_c93297503b4b476c_01000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;

}

void _0RL_cd_c93297503b4b476c_01000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Long&)arg_0 <<= _n;

}

void _0RL_cd_c93297503b4b476c_01000000::marshalReturnedValues(cdrStream& _n)
{
  PetitPrince::Draw_Helper::marshal(result,_n);

}

void _0RL_cd_c93297503b4b476c_01000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = PetitPrince::Draw_Helper::unmarshal(_n);

}

const char* const _0RL_cd_c93297503b4b476c_01000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_01000000* tcd = (_0RL_cd_c93297503b4b476c_01000000*)cd;
  PetitPrince::_impl_PetitPrinceService* impl = (PetitPrince::_impl_PetitPrinceService*) svnt->_ptrToInterface(PetitPrince::PetitPrinceService::_PD_repoId);
  tcd->result = impl->getDraw(tcd->arg_0);


}

PetitPrince::Draw* PetitPrince::_objref_PetitPrinceService::getDraw(::CORBA::Long id)
{
  _0RL_cd_c93297503b4b476c_01000000 _call_desc(_0RL_lcfn_c93297503b4b476c_11000000, "getDraw", 8);
  _call_desc.arg_0 = id;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cdouble_i_clong
class _0RL_cd_c93297503b4b476c_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::Double arg_0;
  ::CORBA::Long arg_1;
};

void _0RL_cd_c93297503b4b476c_21000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  arg_1 >>= _n;

}

void _0RL_cd_c93297503b4b476c_21000000::unmarshalArguments(cdrStream& _n)
{
  (::CORBA::Double&)arg_0 <<= _n;
  (::CORBA::Long&)arg_1 <<= _n;

}

const char* const _0RL_cd_c93297503b4b476c_21000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_21000000* tcd = (_0RL_cd_c93297503b4b476c_21000000*)cd;
  PetitPrince::_impl_PetitPrinceService* impl = (PetitPrince::_impl_PetitPrinceService*) svnt->_ptrToInterface(PetitPrince::PetitPrinceService::_PD_repoId);
  impl->markDraw(tcd->arg_0, tcd->arg_1);


}

void PetitPrince::_objref_PetitPrinceService::markDraw(::CORBA::Double mark, ::CORBA::Long id)
{
  _0RL_cd_c93297503b4b476c_21000000 _call_desc(_0RL_lcfn_c93297503b4b476c_31000000, "markDraw", 9);
  _call_desc.arg_0 = mark;
  _call_desc.arg_1 = id;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  _cPetitPrince_mDrawSeq
class _0RL_cd_c93297503b4b476c_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  PetitPrince::DrawSeq_var result;
};

void _0RL_cd_c93297503b4b476c_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const PetitPrince::DrawSeq&) result >>= _n;

}

void _0RL_cd_c93297503b4b476c_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new PetitPrince::DrawSeq;
  (PetitPrince::DrawSeq&)result <<= _n;

}

const char* const _0RL_cd_c93297503b4b476c_41000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_41000000* tcd = (_0RL_cd_c93297503b4b476c_41000000*)cd;
  PetitPrince::_impl_PetitPrinceService* impl = (PetitPrince::_impl_PetitPrinceService*) svnt->_ptrToInterface(PetitPrince::PetitPrinceService::_PD_repoId);
  tcd->result = impl->draw_list();


}

PetitPrince::DrawSeq* PetitPrince::_objref_PetitPrinceService::draw_list()
{
  _0RL_cd_c93297503b4b476c_41000000 _call_desc(_0RL_lcfn_c93297503b4b476c_51000000, "_get_draw_list", 15);


  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  void_i_cPetitPrince_mDrawSeq
class _0RL_cd_c93297503b4b476c_61000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_c93297503b4b476c_61000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  PetitPrince::DrawSeq_var arg_0_;
  const PetitPrince::DrawSeq* arg_0;
};

void _0RL_cd_c93297503b4b476c_61000000::marshalArguments(cdrStream& _n)
{
  (const PetitPrince::DrawSeq&) *arg_0 >>= _n;

}

void _0RL_cd_c93297503b4b476c_61000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new PetitPrince::DrawSeq;
  (PetitPrince::DrawSeq&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_c93297503b4b476c_61000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_c93297503b4b476c_71000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_c93297503b4b476c_61000000* tcd = (_0RL_cd_c93297503b4b476c_61000000*)cd;
  PetitPrince::_impl_PetitPrinceService* impl = (PetitPrince::_impl_PetitPrinceService*) svnt->_ptrToInterface(PetitPrince::PetitPrinceService::_PD_repoId);
  impl->draw_list(*tcd->arg_0);


}

void PetitPrince::_objref_PetitPrinceService::draw_list(const ::PetitPrince::DrawSeq& _v)
{
  _0RL_cd_c93297503b4b476c_61000000 _call_desc(_0RL_lcfn_c93297503b4b476c_71000000, "_set_draw_list", 15);
  _call_desc.arg_0 = &(::PetitPrince::DrawSeq&) _v;

  _invoke(_call_desc);



}
PetitPrince::_pof_PetitPrinceService::~_pof_PetitPrinceService() {}


omniObjRef*
PetitPrince::_pof_PetitPrinceService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::PetitPrince::_objref_PetitPrinceService(ior, id);
}


::CORBA::Boolean
PetitPrince::_pof_PetitPrinceService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::PetitPrince::PetitPrinceService::_PD_repoId) )
    return 1;
  
  return 0;
}

const PetitPrince::_pof_PetitPrinceService _the_pof_PetitPrince_mPetitPrinceService;

PetitPrince::_impl_PetitPrinceService::~_impl_PetitPrinceService() {}


::CORBA::Boolean
PetitPrince::_impl_PetitPrinceService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "pushDraw") ) {

    _0RL_cd_c93297503b4b476c_80000000 _call_desc(_0RL_lcfn_c93297503b4b476c_f0000000, "pushDraw", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "getDraw") ) {

    _0RL_cd_c93297503b4b476c_01000000 _call_desc(_0RL_lcfn_c93297503b4b476c_11000000, "getDraw", 8, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "markDraw") ) {

    _0RL_cd_c93297503b4b476c_21000000 _call_desc(_0RL_lcfn_c93297503b4b476c_31000000, "markDraw", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_draw_list") ) {

    _0RL_cd_c93297503b4b476c_41000000 _call_desc(_0RL_lcfn_c93297503b4b476c_51000000, "_get_draw_list", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_set_draw_list") ) {

    _0RL_cd_c93297503b4b476c_61000000 _call_desc(_0RL_lcfn_c93297503b4b476c_71000000, "_set_draw_list", 15, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
PetitPrince::_impl_PetitPrinceService::_ptrToInterface(const char* id)
{
  if( id == ::PetitPrince::PetitPrinceService::_PD_repoId )
    return (::PetitPrince::_impl_PetitPrinceService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::PetitPrince::PetitPrinceService::_PD_repoId) )
    return (::PetitPrince::_impl_PetitPrinceService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
PetitPrince::_impl_PetitPrinceService::_mostDerivedRepoId()
{
  return ::PetitPrince::PetitPrinceService::_PD_repoId;
}

POA_PetitPrince::DrawService::~DrawService() {}

POA_PetitPrince::PetitPrinceService::~PetitPrinceService() {}

