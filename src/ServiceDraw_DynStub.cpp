// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "ServiceDraw.hpp"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_PetitPrince_mDraw[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"id_author", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"value", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_PetitPrince_mDraw
#  undef _0RL_tc_PetitPrince_mDraw
#endif
static CORBA::TypeCode_ptr _0RL_tc_PetitPrince_mDraw = CORBA::TypeCode::PR_struct_tc("IDL:PetitPrince/Draw:1.0", "Draw", _0RL_structmember_PetitPrince_mDraw, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace PetitPrince { 
  const ::CORBA::TypeCode_ptr _tc_Draw = _0RL_tc_PetitPrince_mDraw;
} 
#else
const ::CORBA::TypeCode_ptr PetitPrince::_tc_Draw = _0RL_tc_PetitPrince_mDraw;
#endif


static CORBA::PR_structMember _0RL_structmember_PetitPrince_mMarkedDraw[] = {
  {"id", CORBA::TypeCode::PR_long_tc()},
  {"mark", CORBA::TypeCode::PR_long_tc()}
};

#ifdef _0RL_tc_PetitPrince_mMarkedDraw
#  undef _0RL_tc_PetitPrince_mMarkedDraw
#endif
static CORBA::TypeCode_ptr _0RL_tc_PetitPrince_mMarkedDraw = CORBA::TypeCode::PR_struct_tc("IDL:PetitPrince/MarkedDraw:1.0", "MarkedDraw", _0RL_structmember_PetitPrince_mMarkedDraw, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace PetitPrince { 
  const ::CORBA::TypeCode_ptr _tc_MarkedDraw = _0RL_tc_PetitPrince_mMarkedDraw;
} 
#else
const ::CORBA::TypeCode_ptr PetitPrince::_tc_MarkedDraw = _0RL_tc_PetitPrince_mMarkedDraw;
#endif


static CORBA::PR_structMember _0RL_structmember_PetitPrince_mDrawingService_mServiceException[] = {
  {"message", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)}
};

static CORBA::TypeCode_ptr _0RL_tc_PetitPrince_mDrawingService_mServiceException = CORBA::TypeCode::PR_exception_tc("IDL:PetitPrince/DrawingService/ServiceException:1.0", "ServiceException", _0RL_structmember_PetitPrince_mDrawingService_mServiceException, 1, &_0RL_tcTrack);
const CORBA::TypeCode_ptr PetitPrince::DrawingService::_tc_ServiceException = _0RL_tc_PetitPrince_mDrawingService_mServiceException;


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace PetitPrince { 
  const ::CORBA::TypeCode_ptr _tc_DrawingService = CORBA::TypeCode::PR_interface_tc("IDL:PetitPrince/DrawingService:1.0", "DrawingService", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr PetitPrince::_tc_DrawingService = CORBA::TypeCode::PR_interface_tc("IDL:PetitPrince/DrawingService:1.0", "DrawingService", &_0RL_tcTrack);
#endif

static void _0RL_PetitPrince_mDraw_marshal_fn(cdrStream& _s, void* _v)
{
  PetitPrince::Draw* _p = (PetitPrince::Draw*)_v;
  *_p >>= _s;
}
static void _0RL_PetitPrince_mDraw_unmarshal_fn(cdrStream& _s, void*& _v)
{
  PetitPrince::Draw* _p = new PetitPrince::Draw;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_PetitPrince_mDraw_destructor_fn(void* _v)
{
  PetitPrince::Draw* _p = (PetitPrince::Draw*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const PetitPrince::Draw& _s)
{
  PetitPrince::Draw* _p = new PetitPrince::Draw(_s);
  _a.PR_insert(_0RL_tc_PetitPrince_mDraw,
               _0RL_PetitPrince_mDraw_marshal_fn,
               _0RL_PetitPrince_mDraw_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, PetitPrince::Draw* _sp)
{
  _a.PR_insert(_0RL_tc_PetitPrince_mDraw,
               _0RL_PetitPrince_mDraw_marshal_fn,
               _0RL_PetitPrince_mDraw_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, PetitPrince::Draw*& _sp)
{
  return _a >>= (const PetitPrince::Draw*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const PetitPrince::Draw*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_PetitPrince_mDraw,
                    _0RL_PetitPrince_mDraw_unmarshal_fn,
                    _0RL_PetitPrince_mDraw_marshal_fn,
                    _0RL_PetitPrince_mDraw_destructor_fn,
                    _v)) {
    _sp = (const PetitPrince::Draw*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_PetitPrince_mMarkedDraw_marshal_fn(cdrStream& _s, void* _v)
{
  PetitPrince::MarkedDraw* _p = (PetitPrince::MarkedDraw*)_v;
  *_p >>= _s;
}
static void _0RL_PetitPrince_mMarkedDraw_unmarshal_fn(cdrStream& _s, void*& _v)
{
  PetitPrince::MarkedDraw* _p = new PetitPrince::MarkedDraw;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_PetitPrince_mMarkedDraw_destructor_fn(void* _v)
{
  PetitPrince::MarkedDraw* _p = (PetitPrince::MarkedDraw*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const PetitPrince::MarkedDraw& _s)
{
  PetitPrince::MarkedDraw* _p = new PetitPrince::MarkedDraw(_s);
  _a.PR_insert(_0RL_tc_PetitPrince_mMarkedDraw,
               _0RL_PetitPrince_mMarkedDraw_marshal_fn,
               _0RL_PetitPrince_mMarkedDraw_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, PetitPrince::MarkedDraw* _sp)
{
  _a.PR_insert(_0RL_tc_PetitPrince_mMarkedDraw,
               _0RL_PetitPrince_mMarkedDraw_marshal_fn,
               _0RL_PetitPrince_mMarkedDraw_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, PetitPrince::MarkedDraw*& _sp)
{
  return _a >>= (const PetitPrince::MarkedDraw*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const PetitPrince::MarkedDraw*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_PetitPrince_mMarkedDraw,
                    _0RL_PetitPrince_mMarkedDraw_unmarshal_fn,
                    _0RL_PetitPrince_mMarkedDraw_marshal_fn,
                    _0RL_PetitPrince_mMarkedDraw_destructor_fn,
                    _v)) {
    _sp = (const PetitPrince::MarkedDraw*)_v;
    return 1;
  }
  return 0;
}


static void _0RL_PetitPrince_mDrawingService_mServiceException_marshal_fn(cdrStream& _s, void* _v)
{
  const PetitPrince::DrawingService::ServiceException* _p = (const PetitPrince::DrawingService::ServiceException*)_v;
  *_p >>= _s;
}
static void _0RL_PetitPrince_mDrawingService_mServiceException_unmarshal_fn(cdrStream& _s, void*& _v)
{
  PetitPrince::DrawingService::ServiceException* _p = new PetitPrince::DrawingService::ServiceException;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_PetitPrince_mDrawingService_mServiceException_destructor_fn(void* _v)
{
  PetitPrince::DrawingService::ServiceException* _p = (PetitPrince::DrawingService::ServiceException*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const PetitPrince::DrawingService::ServiceException& _s)
{
  PetitPrince::DrawingService::ServiceException* _p = new PetitPrince::DrawingService::ServiceException(_s);
  _a.PR_insert(_0RL_tc_PetitPrince_mDrawingService_mServiceException,
               _0RL_PetitPrince_mDrawingService_mServiceException_marshal_fn,
               _0RL_PetitPrince_mDrawingService_mServiceException_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const PetitPrince::DrawingService::ServiceException* _sp)
{
  _a.PR_insert(_0RL_tc_PetitPrince_mDrawingService_mServiceException,
               _0RL_PetitPrince_mDrawingService_mServiceException_marshal_fn,
               _0RL_PetitPrince_mDrawingService_mServiceException_destructor_fn,
               (PetitPrince::DrawingService::ServiceException*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const PetitPrince::DrawingService::ServiceException*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_PetitPrince_mDrawingService_mServiceException,
                    _0RL_PetitPrince_mDrawingService_mServiceException_unmarshal_fn,
                    _0RL_PetitPrince_mDrawingService_mServiceException_marshal_fn,
                    _0RL_PetitPrince_mDrawingService_mServiceException_destructor_fn,
                    _v)) {
    _sp = (const PetitPrince::DrawingService::ServiceException*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cPetitPrince_mDrawingService_mServiceException(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const PetitPrince::DrawingService::ServiceException & _ex = (const PetitPrince::DrawingService::ServiceException &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cPetitPrince_mDrawingService_mServiceException (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const PetitPrince::DrawingService::ServiceException* _ex = (const PetitPrince::DrawingService::ServiceException*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cPetitPrince_mDrawingService_mServiceException {
public:
  _0RL_insertToAny_Singleton__cPetitPrince_mDrawingService_mServiceException() {
    PetitPrince::DrawingService::ServiceException::insertToAnyFn = _0RL_insertToAny__cPetitPrince_mDrawingService_mServiceException;
    PetitPrince::DrawingService::ServiceException::insertToAnyFnNCP = _0RL_insertToAnyNCP__cPetitPrince_mDrawingService_mServiceException;
  }
};
static _0RL_insertToAny_Singleton__cPetitPrince_mDrawingService_mServiceException _0RL_insertToAny_Singleton__cPetitPrince_mDrawingService_mServiceException_;

static void _0RL_PetitPrince_mDrawingService_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_PetitPrince_mDrawingService_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(PetitPrince::DrawingService::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_PetitPrince_mDrawingService_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, PetitPrince::DrawingService_ptr _o)
{
  PetitPrince::DrawingService_ptr _no = PetitPrince::DrawingService::_duplicate(_o);
  _a.PR_insert(PetitPrince::_tc_DrawingService,
               _0RL_PetitPrince_mDrawingService_marshal_fn,
               _0RL_PetitPrince_mDrawingService_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, PetitPrince::DrawingService_ptr* _op)
{
  _a.PR_insert(PetitPrince::_tc_DrawingService,
               _0RL_PetitPrince_mDrawingService_marshal_fn,
               _0RL_PetitPrince_mDrawingService_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = PetitPrince::DrawingService::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, PetitPrince::DrawingService_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(PetitPrince::_tc_DrawingService,
                    _0RL_PetitPrince_mDrawingService_unmarshal_fn,
                    _0RL_PetitPrince_mDrawingService_marshal_fn,
                    _0RL_PetitPrince_mDrawingService_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (PetitPrince::DrawingService_ptr)_r->_ptrToObjRef(PetitPrince::DrawingService::_PD_repoId);
    else
      _o = PetitPrince::DrawingService::_nil();
    return 1;
  }
  return 0;
}

